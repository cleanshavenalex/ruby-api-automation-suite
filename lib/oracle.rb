module Oracle

  FILTERED_USER_FIELDS = [
      :failed_password_count,
      :failed_question_count,
      :is_business_owner,
      :temp_password_created_at,
      :temp_password_hash,
  ]

  BOOLEAN_USER_FIELDS = [
      :autogenerated_email,
      :hide_third_party_photo,
      :is_business_owner,
      :is_deleted,
      :marketing_optout,
      :news_letter_optin,
      :sharing_optout,
      :suppressed,
      :password_reset,
      :verified,
  ]

  BOOLEAN_USER_ADDRESS_FIELDS = [
      :is_deleted,
  ]

  FILTERED_USER_ADDRESS_FIELDS = [
      :type,
  ]

  FILTERED_USER_ACCOUNT_FIELDS = [
      :id,
  ]

  def self.find_user(conditions)
    obj = turtle_db[:users].where(conditions).first
    format_user_response(obj)
  end

  def self.find_users(conditions)
    obj = turtle_db[:users].where(conditions).all
    obj.map { |x| format_user_response(x) }
  end

  def self.find_account(conditions)
    obj = turtle_db[:accts].where(conditions).first
    format_user_account_response(obj)
  end

  def self.find_accounts(conditions)
    obj = turtle_db[:accts].where(conditions).all
    obj.map { |x| format_user_account_response(x) }
  end

  def self.find_address(conditions)
    obj = turtle_db[:addr].where(conditions).first
    format_user_address_response(obj)
  end

  def self.find_addresses(conditions)
    obj = turtle_db[:addr].where(conditions).all
    obj.map { |x| format_user_address_response(x) }
  end

  def self.find_subscription(conditions)
    obj = turtle_db[:email_subs].where(conditions).first
    format_email_subscription_response(obj)
  end

  def self.find_subscriptions(conditions)
    obj = turtle_db[:email_subs].where(conditions).all
    obj.map { |x| format_email_subscription_response(x) }
  end

  def self.delete_all_test_ugc
    puts "\nDeleting test UGC..."
    delete_test_ratings
    delete_test_b_image_image_relations
  end

  def self.delete_test_ratings
    deleted_count = 0
    TurtleUser.all_test_ids.each_slice(99) do |users_slice|
      deleted_count += panda_db[:rate].where(:author_id => users_slice).delete
    end
    puts "Deleted #{deleted_count} ratings."
  end

  def self.delete_test_b_image_image_relations
    deleted_count = 0
    TurtleUser.all_test_ids.each_slice(99) do |users_slice|
      deleted_count += monkey_db[:monkey__b_image_rels].where(:user => users_slice).delete
    end
    puts "Deleted #{deleted_count} b_image_image_relations."
  end

  def self.turtle_db
    @turtle_db ||= Sequel.connect(Config["database"]["turtle"])
  end

  def self.panda_db
    @panda_db ||= Sequel.connect(Config["database"]["panda"])
  end

  def self.monkey_db
    @monkey_db ||= Sequel.connect(Config["database"]["monkey"])
  end

  private

  def self.format_user_response(object)
    return unless object

    BOOLEAN_USER_FIELDS.each do |k|
      object[k] = (object[k] == 1)
    end

    FILTERED_USER_FIELDS.each do |k|
      object.delete(k)
    end

    object.deep_stringify_keys
  end

  def self.format_user_address_response(object)
    return unless object

    BOOLEAN_USER_ADDRESS_FIELDS.each do |k|
      object[k] = (object[k] == 1)
    end

    FILTERED_USER_ADDRESS_FIELDS.each do |k|
      object.delete(k)
    end

    object.deep_stringify_keys
  end

  def self.format_user_account_response(object)
    return unless object

    FILTERED_USER_ACCOUNT_FIELDS.each do |k|
      object.delete(k)
    end

    object.deep_stringify_keys
  end

  def self.format_email_subscription_response(object)
    return unless object

    object.deep_stringify_keys
  end
end
